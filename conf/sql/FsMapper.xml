<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="sql.FsMapper">
    <update id="createUserFs">
        create table fs_struct_${owner}
        (
            id        bigserial                    not null primary key,
            parent_id bigint                       not null,
            indate    bigint                       not null,
            name      text,
            size      bigint  default 0            not null,
            type      text    default 'DIR':: text not null,
            ref_id    text    default '--':: text  not null,
            selected  boolean default false,
            found     boolean default false
        )
    </update>

    <insert id="createRoot">
        insert into fs_struct_${owner} (parent_id, name, indate)
        values (0, '', date_part('epoch'::text, now()))
    </insert>

    <update id="createTree">
        create or replace view fs_tree_${owner} (id, parent_id, path) as
        (
        WITH RECURSIVE tree AS
                           (
                               SELECT id,
                                      name,
                                      parent_id,
                                      ARRAY [name] AS fpath
                               FROM fs_struct_${owner}
                               WHERE parent_id = 0
                               UNION ALL
                               SELECT si.id,
                                      si.name,
                                      si.parent_id,
                                      sp.fpath || si.name As fpath
                               FROM fs_struct_${owner} As si
                                        JOIN
                                    tree AS sp
                                    ON (si.parent_id = sp.id)
                           )
        SELECT id, parent_id, array_to_string(fpath, '/')
        FROM tree)
    </update>

    <insert id="mkDir">
        insert into fs_struct_${owner} (parent_id, indate, name, type)
        values (#{parentId} , #{indate}, #{name} , #{type} )
    </insert>

    <delete id="dropOrphans">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id = #{id}
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                          sp.fpath || si.name As fpath
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </delete>

    <insert id="mkFile">
        insert into fs_struct_${owner} (parent_id, indate, name, type, size, ref_id)
        values (#{file.parentId} , #{file.indate}, #{file.name} , #{file.type} , #{file.size} , #{file.refId} )
    </insert>

    <select id="getEntry" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id = #{id}
    </select>

    <sql id="struct">
        f.id,
               f.parent_id as "parentId",
               f.indate,
               f.name,
               f.size,
               f.type,
               f.ref_id        as "refId",
               f.selected,
               ft.path
        from fs_struct_${owner} f
                 left outer join fs_tree_${owner} ft on f.id = ft.id
    </sql>

    <select id="findEntryByPath" resultType="model.TFile">
        select
        <include refid="struct"/>
        where ft.path = #{path}
        limit 1
    </select>

    <delete id="dropEntry">
        delete
        from fs_struct_${owner}
        where id = #{id}
    </delete>

    <select id="findEntryAt" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.name = #{name} and f.parent_id = #{parentId}
           limit 1
    </select>

    <update id="updateEntry">
        update fs_struct_${owner}
        set name      = #{name} ,
            indate    = #{indate},
            parent_id = #{parentId} ,
            selected  = #{selected}
        where id = #{id}
    </update>

    <select id="listEntries" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.parent_id = #{parentId} order by f.name, f.indate
    </select>

    <select id="isFsTableExist" resultType="_boolean">
        SELECT EXISTS(SELECT
                      FROM information_schema.tables
                      WHERE table_schema = 'public'
                        AND table_name = 'fs_struct_${userId}'
                   )
    </select>

    <update id="updateDirCount">
        update fs_struct_${owner}
        set size = #{size}
        where id = #{id}
    </update>

    <select id="getParentEntry" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id = (select parent_id from fs_struct_${owner} where id = #{id} )
    </select>

    <delete id="dropEntryByPath">
        delete
        from fs_struct_${owner}
        where id = (select id from fs_tree_${owner} where path = #{path})
    </delete>

    <delete id="dropEntryByName">
        delete
        from fs_struct_${owner}
        where parent_id = #{parentId}
          and name = #{name}
    </delete>

    <select id="findEntriesByPaths" resultType="model.TFile">
        select
        <include refid="struct"/>
        where ft.path in
        <foreach collection="paths" item="path" open="(" close=")" separator=",">
            #{path}
        </foreach>
    </select>

    <delete id="dropEntries">
        delete
        from fs_struct_${owner}
        where id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
    </delete>

    <delete id="dropMultiOrphans">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
        UNION ALL SELECT si.id,
                         si.name,
                         si.parent_id,
                         sp.fpath || si.name As fpath
                  FROM fs_struct_${owner} As si
                           JOIN
                       tree AS sp
                       ON (si.parent_id = sp.id)
                      )
            SELECT id
            FROM tree)
    </delete>

    <insert id="mkDirs">
        insert into fs_struct_${owner} (parent_id, indate, name, type)
            values
        <foreach collection="dirs" item="dir" separator=",">
                (#{dir.parentId} ,#{dir.indate} ,#{dir.name} ,#{dir.type.name} )
        </foreach>
    </insert>

    <select id="listTypeEntries" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.parent_id = #{parentId} and type = #{type} order by f.name, f.indate
    </select>

    <select id="getByIds" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.id in
        <foreach collection="ids" open="(" close=")" separator="," item="id">
            #{id}
        </foreach>
        order by f.name, f.indate
    </select>

    <select id="getPredictors" resultType="model.TFile">
        with recursive a as (select head.id, head.parent_id
                             from fs_struct_${owner} head
                             where head.id = #{id}
                             union all
                             select tail.id, tail.parent_id
                             from fs_struct_${owner} tail
                                      join a on tail.id = a.parent_id)
        select a.id, a.parent_id as "parentId"
        from a
    </select>

    <select id="selectChildsByName" resultType="int">
        update fs_struct_${owner}
        set found = true
        where lower(name) like #{query}
          and id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                          ARRAY [name] AS fpath
                                   FROM fs_struct_${owner}
                                   WHERE parent_id = #{id}
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                          sp.fpath || si.name As fpath
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </select>

    <select id="getSelectedSingle" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.selected = true
        limit 1
    </select>

    <update id="resetFound">
        update fs_struct_${owner}
        set found = false
    </update>

    <update id="resetSelection">
        update fs_struct_${owner}
        set selected = false
    </update>

    <update id="setSelection">
        update fs_struct_${owner}
        set selected = #{selected}
        where id in
        <foreach collection="selection" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </update>

    <select id="getSelected" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.selected = true
    </select>

    <delete id="dropSelectionWithChilds">
        delete
        from fs_struct_${owner}
        where id in (
            WITH RECURSIVE tree AS
                               (
                                   SELECT id,
                                          name,
                                          parent_id,
                                   FROM fs_struct_${owner}
                                   WHERE selected = true
                                   UNION ALL
                                   SELECT si.id,
                                          si.name,
                                          si.parent_id,
                                   FROM fs_struct_${owner} As si
                                            JOIN
                                        tree AS sp
                                        ON (si.parent_id = sp.id)
                               )
            SELECT id
            FROM tree)
    </delete>

    <select id="selectFound" resultType="model.TFile">
        select
        <include refid="struct"/>
        where f.found = true
    </select>
</mapper>
